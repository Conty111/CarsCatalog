// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Conty111/CarsCatalog/internal/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// CarManager is an autogenerated mock type for the CarManager type
type CarManager struct {
	mock.Mock
}

// CreateCars provides a mock function with given fields: cars
func (_m *CarManager) CreateCars(cars []*models.Car) error {
	ret := _m.Called(cars)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*models.Car) error); ok {
		r0 = rf(cars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *CarManager) DeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *CarManager) GetByID(id uuid.UUID) (*models.Car, error) {
	ret := _m.Called(id)

	var r0 *models.Car
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Car); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCars provides a mock function with given fields: offset, limit, filters
func (_m *CarManager) GetCars(offset int, limit int, filters *models.CarFilter) ([]models.Car, error) {
	ret := _m.Called(offset, limit, filters)

	var r0 []models.Car
	if rf, ok := ret.Get(0).(func(int, int, *models.CarFilter) []models.Car); ok {
		r0 = rf(offset, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *models.CarFilter) error); ok {
		r1 = rf(offset, limit, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastOffset provides a mock function with given fields: filters
func (_m *CarManager) GetLastOffset(filters *models.CarFilter) (int64, error) {
	ret := _m.Called(filters)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*models.CarFilter) int64); ok {
		r0 = rf(filters)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.CarFilter) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, updates
func (_m *CarManager) UpdateByID(id uuid.UUID, updates interface{}) error {
	ret := _m.Called(id, updates)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, interface{}) error); ok {
		r0 = rf(id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCarManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarManager creates a new instance of CarManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarManager(t mockConstructorTestingTNewCarManager) *CarManager {
	mock := &CarManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
